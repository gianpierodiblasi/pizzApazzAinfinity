<?xml version="1.0" encoding="UTF-8"?> 
<project name="pizzApazzAinfinity" basedir="." default="build"> 
 
  <property name="src.dir" value="${basedir}/src" /> 
  <property name="transpile.dir" value="${basedir}/transpile" /> 
  <property name="build.dir" value="${basedir}/build" /> 
  <property name="test.dir" value="${basedir}/test" /> 
  <property name="transpile-test.dir" value="${basedir}/transpile-test" /> 
  <property name="josetta.jar" value="${basedir}/lib/josetta-1.8.4-jar-with-dependencies.jar" /> 
  
  <target name="clean"> 
    <delete>
      <fileset dir="${build.dir}"/>
    </delete> 
  </target> 
  
  <target name="transpile">
    <java classname="giada.josetta.Josetta">
      <arg value="-in"/>
      <arg value="${src.dir}"/>
      <arg value="-out"/>
      <arg value="${transpile.dir}"/>
      <classpath>
        <pathelement path="${josetta.jar}"/>
      </classpath>
    </java>
  </target>
  
  <target name="transpile-test">
    <java classname="giada.josetta.Josetta">
      <arg value="-in"/>
      <arg value="${test.dir}"/>
      <arg value="-out"/>
      <arg value="${transpile-test.dir}"/>
      <classpath>
        <pathelement path="${josetta.jar}"/>
      </classpath>
    </java>
  </target>
  
  <target name="version">
    <loadfile property="version" srcFile="${basedir}/version.properties"/>
  </target>
  
  <target name="js_source_list_comma">
    <loadfile property="js_source_list_comma" srcFile="${basedir}/js_list.properties">
      <filterchain>
        <linecontainsregexp negate="true">
          <regexp pattern="#.*"/>
        </linecontainsregexp>
        <suffixlines suffix=", "/>
        <striplinebreaks/>
      </filterchain>
    </loadfile>
  </target>
  
  <target name="js_source_list_space">
    <loadfile property="js_source_list_space" srcFile="${basedir}/js_list.properties">
      <filterchain>
        <linecontainsregexp negate="true">
          <regexp pattern="#.*"/>
        </linecontainsregexp>
        <suffixlines suffix=" "/>
        <striplinebreaks/>
      </filterchain>
    </loadfile>
  </target>
  
  <target name="css_source_list_comma">
    <loadfile property="css_source_list_comma" srcFile="${basedir}/css_list.properties">
      <filterchain>
        <linecontainsregexp negate="true">
          <regexp pattern="#.*"/>
        </linecontainsregexp>
        <suffixlines suffix=", "/>
        <striplinebreaks/>
      </filterchain>
    </loadfile>
  </target>
  
  <target name="css_source_list_space">
    <loadfile property="css_source_list_space" srcFile="${basedir}/css_list.properties">
      <filterchain>
        <linecontainsregexp negate="true">
          <regexp pattern="#.*"/>
        </linecontainsregexp>
        <suffixlines suffix=" "/>
        <striplinebreaks/>
      </filterchain>
    </loadfile>
  </target>
  
  <target name="build_js" depends="version, js_source_list_comma">
    <concat destfile="${build.dir}/bundle-${version}.js" fixlastline="yes">
      <filterchain>
        <linecontainsregexp negate="true">
          <regexp pattern="/* global .* */"/>
        </linecontainsregexp>
      </filterchain>
      
      <filelist dir="${basedir}" files="${js_source_list_comma}"/>
    </concat>
  </target>
  
  <target name="build_css" depends="version,css_source_list_comma">
    <concat destfile="${build.dir}/bundle-${version}.css" fixlastline="yes">
      <filelist dir="${basedir}" files="${css_source_list_comma}"/>
    </concat>
  </target>
  
  <target name="build_js_min" depends="version,js_source_list_space">
    <exec executable="cmd">
      <arg value="/c"/>
      <arg value="terser"/>
      <arg line="${js_source_list_space}"/>
      <arg line="--output ${build.dir}/bundle-${version}.min.js"/>
      <arg value="--compress"/>
      <arg value="--mangle"/>
      <arg line="--source-map &quot;url='bundle-${version}.min.js.map'&quot;"/>
    </exec>
    
    <replace file="${build.dir}/bundle-${version}.min.js.map" token="transpile/" value="../transpile/"/>
  </target>
  
  <target name="build_css_min" depends="version,css_source_list_space">
    <exec executable="cmd">
      <arg value="/c"/>
      <arg value="cleancss"/>
      <arg line="--source-map"/>
      <arg line="-O2"/>
      <arg line="-o ${build.dir}/bundle-${version}.min.css"/>
      <arg line="${css_source_list_space}"/>
    </exec>
    
    <replace file="${build.dir}/bundle-${version}.min.css.map" token="src\\css\\" value="../src/css/"/>
  </target>
  
  <target name="copy_images">
    <copy todir="${build.dir}/image">
      <fileset dir="${src.dir}/image"/>
    </copy>
  </target>
  
  <target name="copy_htmls">
    <copy todir="${build.dir}/html">
      <fileset dir="${src.dir}" includes="**/*.html"/>
    </copy>
  </target>
  
  <target name="copy_messages">
    <copy todir="${build.dir}/message">
      <fileset dir="${src.dir}/message"/>
    </copy>
  </target>
  
  <target name="copy_loader">
    <copy file="${transpile.dir}/giada/pizzapazza/Z4Loader.js" todir="${build.dir}/"/>
  </target>
  
  <target name="build" depends="transpile,transpile-test,build_js,build_css,build_js_min,build_css_min,copy_images,copy_htmls,copy_messages,copy_loader">
  </target>
  
  <target name="watch">
    <java classname="giada.josetta.Josetta">
      <arg value="-in"/>
      <arg value="${src.dir}"/>
      <arg value="-out"/>
      <arg value="${transpile.dir}"/>
      <arg value="-w"/>
      <classpath>
        <pathelement path="${josetta.jar}"/>
      </classpath>
    </java>
  </target>
  
  <target name="watch-test">
    <java classname="giada.josetta.Josetta">
      <arg value="-in"/>
      <arg value="${test.dir}"/>
      <arg value="-out"/>
      <arg value="${transpile-test.dir}"/>
      <arg value="-w"/>
      <classpath>
        <pathelement path="${josetta.jar}"/>
      </classpath>
    </java>
  </target>
</project>